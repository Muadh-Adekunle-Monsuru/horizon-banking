'use client';
import React from 'react';
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { saveAs } from 'file-saver';
import { Transactions } from '@prisma/client';
import { Button } from './ui/button';

// Helper functions to format the amount and date
const formatAmount = (amount) => `N${amount.toFixed(2)}`;
const formatDateTime = (timestamp) => {
	const date = new Date(timestamp);
	return {
		dateTime: date.toLocaleString(),
	};
};

const GenerateReceipt = ({ transaction }) => {
	const generatePDF = async () => {
		// Create a new PDFDocument
		const pdfDoc = await PDFDocument.create();
		const page = pdfDoc.addPage([600, 800]);

		// Load bank logos
		const stanbicLogo = await fetch(
			'https://asset.brandfetch.io/idjnraASLO/id1JqUmo9j.jpeg'
		).then((res) => res.arrayBuffer());
		const gtLogo = await fetch(
			'https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/GTBank_logo.svg/768px-GTBank_logo.svg.png'
		).then((res) => res.arrayBuffer());
		const firstBankLogo = await fetch(
			'https://upload.wikimedia.org/wikipedia/en/6/62/First_Bank_of_Nigeria_logo.png'
		).then((res) => res.arrayBuffer());

		// Embed the bank logos in the PDF
		const stanbicImage = await pdfDoc.embedJpg(stanbicLogo);
		const gtImage = await pdfDoc.embedPng(gtLogo);
		const firstBankImage = await pdfDoc.embedPng(firstBankLogo);

		// Determine which logo to use
		let bankImage;
		switch (transaction.receiverBank) {
			case 'stanbic':
				bankImage = stanbicImage;
				break;
			case 'gt':
				bankImage = gtImage;
				break;
			default:
				bankImage = firstBankImage;
		}

		// Draw bank logo on the PDF
		page.drawImage(bankImage, {
			x: 50,
			y: 650,
			width: 100,
			height: 100,
		});

		// Load a font
		const font = await pdfDoc.embedFont(StandardFonts.Helvetica);

		// Define text options
		const textOptions = {
			size: 12,
			font: font,
			color: rgb(0, 0, 0),
		};

		// Draw transaction details on the PDF
		const details = [
			{ label: 'Transaction ID', value: transaction.id },
			{ label: 'Transaction Type', value: transaction.type },
			{ label: 'Amount', value: formatAmount(transaction.amount) },
			{
				label: `${transaction.type === 'credit' ? 'Sender' : 'Receiver'} Name`,
				value:
					transaction.type === 'credit'
						? transaction.senderName
						: transaction.receiverName,
			},
			{ label: 'Narration', value: transaction.narration },
			{ label: 'Sender Account', value: transaction.senderAccount },
			{
				label: 'Sender Bank',
				value:
					transaction.senderBank === 'stanbic'
						? 'Stanbic Bank'
						: transaction.senderBank === 'gt'
						? 'GT Bank'
						: 'First Bank',
			},
			{ label: 'Receiver Account', value: transaction.receiverAccount },
			{
				label: 'Receiver Bank',
				value:
					transaction.receiverBank === 'stanbic'
						? 'Stanbic Bank'
						: transaction.receiverBank === 'gt'
						? 'GT Bank'
						: 'First Bank',
			},
			{
				label: 'Date',
				value: formatDateTime(Number(transaction.date)).dateTime,
			},
		];

		details.forEach((detail, index) => {
			page.drawText(`${detail.label}: ${detail.value}`, {
				x: 50,
				y: 600 - index * 30,
				...textOptions,
			});
		});

		// Draw the legal statement at the end
		page.drawText(
			'This receipt is generated by Horizon Banking and is not a real bank document.',
			{
				x: 50,
				y: 50,
				size: 10,
				font: font,
				color: rgb(0.5, 0.5, 0.5),
			}
		);

		// Serialize the PDFDocument to bytes (a Uint8Array)
		const pdfBytes = await pdfDoc.save();

		// Save the PDF
		const blob = new Blob([pdfBytes], { type: 'application/pdf' });
		saveAs(blob, 'transaction_receipt.pdf');
	};

	return (
		<div>
			<Button onClick={generatePDF}>Generate Receipt </Button>
		</div>
	);
};

export default GenerateReceipt;
